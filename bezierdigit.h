#ifndef __BEZIERDIGIT_H_INCLUDED__  
#define __BEZIERDIGIT_H_INCLUDED__ 

#define _USE_MATH_DEFINES

#include "freeform.h"

class BezierDigit: public BezierCurve {

    double controls [10][16] = {
       {-0.056250, -0.743750,
        -0.878125, -0.750000,
        -0.875000, 0.925000,
        -0.056250, 0.921875,
        0.034375, 0.925000,
        0.896875, 0.921875,
        0.925000, -0.721875,
        0.009375, -0.750000},

        {-0.390625, 0.200000,
        0.025000, 0.846875,
        0.025000, 0.846875,
        0.025000, 0.846875,
        0.025000, 0.846875,
        0.025000, 0.846875,
        0.025000, 0.846875,
        0.025000, -0.865625},

        {-0.409375, 0.403125,
        0.015625, 0.881250,
        0.587500, 0.743750,
        0.693750, 0.075000,
        -0.584375, -0.646875,
        -0.637500, -0.671875,
        -0.581250, -0.671875,
        0.306250, -0.631250},

        {-0.453125, 0.550000,
        0.871875, 0.900000,
        0.231250, -0.065625,
        -0.675000, -0.071875,
        -0.309375, -0.071875,
        0.846875, 0.059375,
        0.415625, -0.909375,
        -0.540625, -0.703125},

        {0.053125, -0.809375,
        0.037500, 0.962500,
        0.037500, 0.962500,
        0.037500, 0.962500,
        -0.712500, -0.134375,
        -0.687500, -0.140625,
        -0.659375, -0.146875,
        0.275000, -0.093750},

        {0.475000, 0.571875,
        -0.365625, 0.734375,
        -0.525000, 0.656250,
        -0.637500, -0.315625,
        -0.031250, 0.000000,
        0.746875, 0.534375,
        0.890625, -0.734375,
        -0.356250, -0.784375},

        {0.300000, 0.834375,
        -0.596875, 0.415625,
        -0.775000, -0.678125,
        -0.187500, -0.987500,
        0.528125, -0.890625,
        0.915625, -0.487500,
        0.703125, 0.387500,
        -0.321875, -0.181250},

        {-0.500000, 0.587500,
        0.415625, 0.587500,
        0.415625, 0.587500,
        0.415625, 0.587500,
        0.415625, 0.587500,
        0.415625, 0.587500,
        0.415625, 0.587500,
        -0.425000, -0.678125},

        {-0.125000, 0.015625,
        -0.771875, 0.943750,
        0.928125, 0.921875,
        0.121875, 0.021875,
        -0.709375, -0.625000,
        -0.843750, -0.884375,
        0.934375, -0.921875,
        -0.040625, -0.046875},

        {0.309375, 0.084375,
        -0.600000, -0.175000,
        -0.690625, 0.621875,
        -0.121875, 0.956250,
        0.625000, 0.884375,
        0.750000, 0.306250,
        0.303125, -0.518750,
        -0.296875, -0.715625}
    };

    float scale = 0.10;
    float translateX = 0.88;
    float translateY = 0.88;

public:
    void addControlPoint(float2 p){
        controlPoints.push_back(p);
    }

    void setNumber(int digit) {
        if (digit < 10 && digit >= 0) {
            if (controlPoints.size() > 0)
                controlPoints.clear();
            for (int i = 0; i < 16; i += 2) {
                addControlPoint(float2(controls[digit][i] * scale + translateX,
                        controls[digit][i + 1] * scale + translateY));
            }
        } else if (digit == -1) {
            if (controlPoints.size() > 0)
                controlPoints.clear();
        }
    }

    void setTens() {
        translateX = 0.76;
    }
};

#endif